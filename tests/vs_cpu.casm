
//Very simple cpu assembly definition
//for the user program

//number format definition
.number .hex suffix 'h'
.number .bin suffix 'b'
.number .oct suffix 'o'

.enum output {
    port_0,
    port_1,
    port_2,
    port_3
}

.enum output {
    port_4,
    port_5,
    port_6,
    port_7
}

//opcodes definition
.opcode add adr -> {
    if adr < 0 || adr > 63 {
        .error adr "address is not between 0 and 63";
    }
    .db adr;
}

.opcode and adr -> {
    if adr < 0 || adr > 63 {
        .error adr "address is not between 0 and 63";
    }
    .db 1 << 6 + adr;
}

.opcode jmp adr -> {
    if adr < 0 || adr > 63 {
        .error adr "address is not between 0 and 63";
    }
    .db 2 << 6 + adr;
}

.opcode sta adr -> {
    if adr < 0 || adr > 63 {
        .error adr "address is not between 0 and 63";
    }
    .db 3 << 6 + adr;
}

.opcode sta port, adr -> {
    if adr < 0 || adr > 63 {
        .error adr "address is not between 0 and 63";
    }
    .db adr;
    .db 3 << 6 + port;
}

//meta-opcodes definition

//deposit byte list
.opcode db ...bytes -> {
    for i until (this_address + .len ...bytes) .db ...bytes .get (i - this_address);
}

//dw -> deposit word
.opcode dw value -> {
    .dw value;
}

//rb -> reserve byte (no value)
.opcode rb -> {
    .db 0;
}

//rw -> reserve word (no value)
.opcode rw -> {
    .dw 0;
}