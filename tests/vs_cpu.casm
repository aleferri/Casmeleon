
//Very simple cpu assembly definition
//for the user program

//number format definition
.num 16 '0h' '';
.num 2 '0b' '';
.num 8 '0o' '';

.set Ports {
    port_0,
    port_1,
    port_2,
    port_3,
    port_4,
    port_5,
    port_6,
    port_7
}

//opcodes definition
.opcode add {{ adr }}
.with ( adr : Ints ) -> {
    if adr < 0 || adr > 63 {
        .error adr, "address is not between 0 and 63";
    }
    .out [ adr ];
}

.opcode and {{ adr }} 
.with ( adr : Ints ) -> {
    if adr < 0 || adr > 63 {
        .error adr, "address is not between 0 and 63";
    }
    .out [ 1 << 6 + adr ];
}

.opcode jmp {{ adr }} 
.with ( adr : Ints ) -> {
    if adr < 0 || adr > 63 {
        .error adr, "address is not between 0 and 63";
    }
    .out [ 2 << 6 + adr ];
}

.opcode sta {{ adr }} 
.with ( adr : Ints ) -> {
    if adr < 0 || adr > 63 {
        .error adr, "address is not between 0 and 63";
    }
    .out [ 3 << 6 + adr ];
}

.opcode sta {{ port, adr }} 
.with ( adr : Ints, port : Ports ) -> {
    if adr < 0 || adr > 63 {
        .error adr "address is not between 0 and 63";
    }
    .out [ adr, 3 << 6 + port ];
}